name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # LINTING AND CODE QUALITY
  # =============================================================================
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r backend/requirements.txt
        
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Lint Python code
      run: |
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Format Python code
      run: |
        black --check backend/
        isort --check-only backend/
        
    - name: Type check Python code
      run: |
        mypy backend/ --ignore-missing-imports
        
    - name: Lint TypeScript/JavaScript code
      run: |
        cd frontend
        npm run lint
        
    - name: Format TypeScript/JavaScript code
      run: |
        cd frontend
        npm run format:check

  # =============================================================================
  # UNIT TESTS
  # =============================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        node-version: ['16', '18', '20']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run Python unit tests
      run: |
        pytest tests/unit/ --cov=backend --cov-report=xml --cov-report=html
        
    - name: Run Node.js unit tests
      run: |
        cd frontend
        npm run test:unit
        
    - name: Upload Python coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload Node.js coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # =============================================================================
  # INTEGRATION TESTS
  # =============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_fake_naira_detection
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Set up test database
      run: |
        python -c "
        import psycopg2
        conn = psycopg2.connect(
            host='localhost',
            database='test_fake_naira_detection',
            user='postgres',
            password='postgres'
        )
        conn.close()
        print('Database connection successful')
        "
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_fake_naira_detection
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/integration/ --cov=backend --cov-report=xml --cov-report=html

  # =============================================================================
  # END-TO-END TESTS
  # =============================================================================
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest playwright
        
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Install Playwright browsers
      run: |
        playwright install --with-deps
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Start backend server
      run: |
        cd backend
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Start frontend server
      run: |
        cd frontend
        npm run preview -- --port 3000 &
        sleep 10
        
    - name: Run E2E tests
      run: |
        pytest tests/e2e/ --browser chromium --browser firefox --browser webkit

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r backend/requirements.txt
        
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run Python security scan
      run: |
        safety check -r backend/requirements.txt
        bandit -r backend/ -f json -o bandit-report.json
        
    - name: Run Node.js security scan
      run: |
        cd frontend
        npm audit --audit-level moderate
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          frontend/npm-audit.json

  # =============================================================================
  # BUILD DOCKER IMAGES
  # =============================================================================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =============================================================================
  # DEPLOY TO STAGING
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d

  # =============================================================================
  # DEPLOY TO PRODUCTION
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
        # Example: docker-compose -f docker-compose.prod.yml up -d

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security, build]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.e2e-tests.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "All tests passed! 🎉"
        # Add notification logic here (Slack, email, etc.)
        
    - name: Notify on failure
      if: ${{ needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.e2e-tests.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "Some tests failed! ❌"
        # Add notification logic here (Slack, email, etc.)
