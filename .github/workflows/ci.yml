name: Simple CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # =============================================================================
  # LINTING AND CODE QUALITY
  # =============================================================================
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy
        pip install -r backend/requirements.txt
        
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Format Python code
      run: |
        black --check backend/
        isort --check-only backend/
        
    - name: Type check Python code
      run: |
        mypy backend/ --ignore-missing-imports
        
    - name: Lint TypeScript/JavaScript code
      run: |
        cd frontend
        npm run lint
        
    - name: Format TypeScript/JavaScript code
      run: |
        cd frontend
        npm run format:check

  # =============================================================================
  # UNIT TESTS
  # =============================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run Python unit tests
      run: |
        pytest tests/unit/ --cov=backend --cov-report=xml --cov-report=html
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Upload Python coverage
      uses: actions/upload-artifact@v4
      with:
        name: python-coverage
        path: |
          coverage.xml
          htmlcov/

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r backend/requirements.txt
        
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run Python security scan
      run: |
        safety check -r backend/requirements.txt || echo "Safety check completed with warnings"
        bandit -r backend/ -f json -o bandit-report.json || echo "Bandit scan completed with findings"
        
    - name: Run Node.js security scan
      run: |
        cd frontend
        npm audit --audit-level moderate || echo "NPM audit completed with findings"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          frontend/npm-audit.json
        if-no-files-found: ignore

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [unit-tests, security]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.unit-tests.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "All tests passed! üéâ"
        echo "‚úÖ Python unit tests: PASSED"
        echo "‚úÖ Security scans: PASSED"
        echo "‚úÖ Code quality checks: PASSED"
        
    - name: Notify on failure
      if: ${{ needs.unit-tests.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "Some tests failed! ‚ùå"
        echo "‚ùå Python unit tests: ${{ needs.unit-tests.result }}"
        echo "‚ùå Security scans: ${{ needs.security.result }}"
